* Fossicker
** Implementation
- User will be able to select another  asset from history. If it is an instance
  of a subclass of  asset, user will be able to export, or  delete it. If it is
  an instance of asset, user will be able to regenerate, or delete.
- Write project  history to seperate file?  so it can be  ignored from project?
- Any asset read from  histroy is just an asset, not an  instance of a specific
  asset class. Because type specifications will change between sessions.
- Asset  class  will  provide  delete/regenerate  function  for  their  history
  assets. If deleted it is deleted from history.

- query-initargs using metaclass base-arglist?
  - metaclass name is 'resource
  - :type :documentation maybe :query-method keyword args to each arg?
  - maybe even make them objects and write documentation method for them?
- or maybe just document the initargs in class documentation and get defining-class documentation for class
- do both as explicit and implicit querying
- finalize inheritance using c2mop:ensure-finalized to make sure even though it is not necessary for this specific case since always a draft asset will be initialized before documenting initargs.
- check partial-initargs test as example.
(mapcar #'c2mop:slot-definition-initform (c2mop:class-slots (find-class 'fck::project)))
(mapcar #'c2mop:slot-definition-initargs (c2mop:class-slots (find-class 'fck::project)))
(mapcar #'c2mop:slot-definition-type (c2mop:class-slots (find-class 'fck::project)))
(c2mop:compute-default-initargs (find-class 'fck::project))
(contextl::partial-class-defining-classes (find-class 'fossicker::video))
(contextl:partial-class-base-initargs (find-class 'fossicker::project))
(c2mop:class-direct-default-initargs (car (c2mop:class-direct-superclasses (find-class 'fossicker::project)))) change with defining classes
(documentation (car (c2mop:class-direct-superclasses (find-class 'fossicker::asset))) 't) same
(c2mop:class-default-initargs (find-class 'fossicker::project)) don't use, inherits
(find (contextl:partial-class-defining-metaclass (find-class 'fck::asset)) (contextl:partial-class-defining-classes (find-class 'fck::asset)) :key #'type-of)
** Interface
- UI: Generate, Project, History, Settings
- For  Slime and  CLI, standard  error handling  is good,  but for  GUI, errors
  should be handled with a proper method.
- If  no parameter  is provided  on startup,  or -gui  parameter is  explicitly
  provided, and if there is an  active desktop session, fossicker will start in
  GUI mode.  If  it was explicitly started  with -cli parameter or  there is no
  desktop session  available, it will  start in  command line, the  CLI session
  will  be managed  by  one character  mode  settings like  fdisk.  If -srv  is
  provided, the swank  server will start so emacs or  other clients can connect
  it.
